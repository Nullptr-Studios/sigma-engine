# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:   # List of stages for jobs, and their order of execution
#  - tablen
  - build
  
#tablen-job:
#  stage: tablen
#  tags:
#    - windows
#  script:
#    - echo "Checking for lines longer than 120 characters..."
#    - |
#      for file in $(find . -type f \( -iname "*.c" -o -iname "*.h" -o -iname "*.cpp" -o -iname "*.hpp" \)); do
#        while IFS= read -r line; do
#          if [ ${#line} -gt 120 ]; then
#            echo "File '$file' has a line longer than 120 characters"
#            break
#          fi
#        done < "$file"
#      done
#
build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - windows
  script:
    - echo "Compiling the code..."
    - mkdir bin 
    - cd bin
    - cmake ../ -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --config Debug --target fnf_E
    - echo "Compile sucesfull."
